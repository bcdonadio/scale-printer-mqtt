name: Build and Test Daemons

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  SCALE_DAEMON_IMAGE_BASE: local/scale-daemon
  PRINTER_DAEMON_IMAGE_BASE: local/printer-daemon
  IMAGE_TAG: ci-${{ github.sha }}

jobs:
  determine_platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.build_platforms.outputs.platforms }}
      platforms_for_display: ${{ steps.build_platforms.outputs.platforms_for_display }}
    steps:
      - name: Determine Build Platforms
        id: build_platforms
        run: |
          if [ -n "${{ env.PLATFORMS_OVERRIDE }}" ]; then
            echo "Using overridden platforms: ${{ env.PLATFORMS_OVERRIDE }}"
            echo "platforms=${{ env.PLATFORMS_OVERRIDE }}" >> $GITHUB_OUTPUT
            echo "platforms_for_display=$(echo ${{ env.PLATFORMS_OVERRIDE }} | tr ',' ' ')" >> $GITHUB_OUTPUT
          else
            DEFAULT_PLATFORMS="linux/amd64,linux/arm64"
            echo "Using default platforms: $DEFAULT_PLATFORMS"
            echo "platforms=$DEFAULT_PLATFORMS" >> $GITHUB_OUTPUT
            echo "platforms_for_display=$(echo $DEFAULT_PLATFORMS | tr ',' ' ')" >> $GITHUB_OUTPUT
          fi

  build_images:
    runs-on: ubuntu-latest
    needs: determine_platforms
    strategy:
      matrix:
        daemon:
          - name: scale-daemon
            path: ./scale_daemon
            image_base_env_var: SCALE_DAEMON_IMAGE_BASE
          - name: printer-daemon
            path: ./printer_daemon
            image_base_env_var: PRINTER_DAEMON_IMAGE_BASE
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ needs.determine_platforms.outputs.platforms }}

      - name: Build and Cache Image - ${{ matrix.daemon.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.daemon.path }}
          file: ${{ matrix.daemon.path }}/Containerfile
          platforms: ${{ needs.determine_platforms.outputs.platforms }}
          push: false
          load: true
          tags: ${{ env[matrix.daemon.image_base_env_var] }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: final

  unit_test_images:
    runs-on: ubuntu-latest
    needs: [determine_platforms, build_images]
    strategy:
      matrix:
        daemon:
          - name: scale-daemon
            path: ./scale_daemon
          - name: printer-daemon
            path: ./printer_daemon
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ needs.determine_platforms.outputs.platforms }}

      - name: Run Unit Tests - ${{ matrix.daemon.name }}
        run: |
          docker buildx build \
            --platform ${{ needs.determine_platforms.outputs.platforms_for_display }} \
            -f ${{ matrix.daemon.path }}/Containerfile \
            --target tester \
            --cache-from type=gha \
            --load \
            ${{ matrix.daemon.path }}

  integration_test:
    runs-on: ubuntu-latest
    needs: [build_images, unit_test_images]
    steps:
      - name: Install Docker Compose
        run: |
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
              | sudo gpg --dearmor \
              -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
              | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get remove -y moby-compose || echo "moby-compose not found, proceeding."
            sudo apt-get install -y docker-compose-plugin

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create mosquitto password file
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends mosquitto mosquitto-clients
          MOSQUITTO_PASSWD_PATH=""
          DPKG_OUTPUT=$(dpkg -L mosquitto-clients 2>/dev/null || true)
          if [ -n "$DPKG_OUTPUT" ]; then
            MOSQUITTO_PASSWD_PATH=$(echo "$DPKG_OUTPUT" | grep -E '(/usr)?/s?bin/mosquitto_passwd$' | head -n 1)
          fi
          if [ -z "$MOSQUITTO_PASSWD_PATH" ]; then
            MOSQUITTO_PASSWD_PATH=$(which mosquitto_passwd 2>/dev/null || true)
          fi
          if [ -z "$MOSQUITTO_PASSWD_PATH" ]; then
            if [ -x "/usr/bin/mosquitto_passwd" ]; then
                MOSQUITTO_PASSWD_PATH="/usr/bin/mosquitto_passwd"
            elif [ -x "/usr/sbin/mosquitto_passwd" ]; then
                MOSQUITTO_PASSWD_PATH="/usr/sbin/mosquitto_passwd"
            fi
          fi
          if [ -z "$MOSQUITTO_PASSWD_PATH" ]; then
            echo "Error: mosquitto_passwd command not found after installation and path checks."
            echo "dpkg -L output was:"
            echo "$DPKG_OUTPUT"
            exit 1
          fi
          echo "Using mosquitto_passwd at: $MOSQUITTO_PASSWD_PATH"
          mkdir -p mosquitto/config
          sudo rm -f mosquitto/config/mosquitto_passwd
          sudo $MOSQUITTO_PASSWD_PATH -c mosquitto/config/mosquitto_passwd scale_user scale_password
          sudo $MOSQUITTO_PASSWD_PATH mosquitto/config/mosquitto_passwd printer_user printer_password
          echo "Setting permissions for mosquitto_passwd file..."
          sudo chown root:root mosquitto/config/mosquitto_passwd
          sudo chmod 0600 mosquitto/config/mosquitto_passwd
          echo "Permissions set."

      - name: Prepare .env file for Docker Compose
        run: |
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" > .env
          echo "SCALE_DAEMON_IMAGE_NAME=${{ env.SCALE_DAEMON_IMAGE_BASE }}" >> .env
          echo "PRINTER_DAEMON_IMAGE_NAME=${{ env.PRINTER_DAEMON_IMAGE_BASE }}" >> .env
          echo "Generated .env file for Docker Compose:"
          cat .env

      - name: Run Integration Tests with Docker Compose
        run: |
          docker compose -f docker-compose.yml up --abort-on-container-exit --exit-code-from scale-daemon --timeout 60

      - name: Docker Compose Down (if tests passed or on failure)
        if: always()
        run: |
          docker compose -f docker-compose.yml down
