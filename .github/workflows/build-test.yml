name: Build and Test Daemons

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_TAG: ci-${{ github.sha }}

jobs:
  determine_platforms:
    runs-on: ubuntu-latest
    outputs:
      platforms: ${{ steps.build_platforms.outputs.platforms }}
      platforms_for_display: ${{ steps.build_platforms.outputs.platforms_for_display }}
    steps:
      - name: Determine Build Platforms
        id: build_platforms
        run: |
          if [ -n "${{ env.PLATFORMS_OVERRIDE }}" ]; then
            echo "Using overridden platforms: ${{ env.PLATFORMS_OVERRIDE }}"
            echo "platforms=${{ env.PLATFORMS_OVERRIDE }}" >> $GITHUB_OUTPUT
            echo "platforms_for_display=$(echo ${{ env.PLATFORMS_OVERRIDE }} | tr ',' ' ')" >> $GITHUB_OUTPUT
          else
            DEFAULT_PLATFORMS="linux/amd64,linux/arm64"
            echo "Using default platforms: $DEFAULT_PLATFORMS"
            echo "platforms=$DEFAULT_PLATFORMS" >> $GITHUB_OUTPUT
            echo "platforms_for_display=$(echo $DEFAULT_PLATFORMS | tr ',' ' ')" >> $GITHUB_OUTPUT
          fi

  build_images:
    runs-on: ubuntu-latest
    needs: determine_platforms
    permissions:
      packages: write
    strategy:
      matrix:
        daemon:
          - name: scale-daemon
            path: ./scale_daemon
          - name: printer-daemon
            path: ./printer_daemon
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ needs.determine_platforms.outputs.platforms }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Cache Image - ${{ matrix.daemon.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.daemon.path }}
          file: ${{ matrix.daemon.path }}/Containerfile
          platforms: ${{ needs.determine_platforms.outputs.platforms }}
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.daemon.name }}:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: final

      - name: Build and Cache Tester Image - ${{ matrix.daemon.name }}
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.daemon.path }}
          file: ${{ matrix.daemon.path }}/Containerfile
          platforms: ${{ needs.determine_platforms.outputs.platforms }}
          push: true
          tags: ghcr.io/${{ github.repository }}/${{ matrix.daemon.name }}-tester:${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: tester

  unit_test_images:
    runs-on: ubuntu-latest
    needs: [determine_platforms, build_images]
    strategy:
      matrix:
        daemon:
          - name: scale-daemon
            path: ./scale_daemon
          - name: printer-daemon
            path: ./printer_daemon
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: ${{ needs.determine_platforms.outputs.platforms }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Tester Image - ${{ matrix.daemon.name }}
        run: |
          docker pull ghcr.io/${{ github.repository }}/${{ matrix.daemon.name }}-tester:${{ env.IMAGE_TAG }}

      - name: Run Unit Tests - ${{ matrix.daemon.name }}
        run: |
          docker run --rm ghcr.io/${{ github.repository }}/${{ matrix.daemon.name }}-tester:${{ env.IMAGE_TAG }}

  integration_test:
    runs-on: ubuntu-latest
    needs: [build_images, unit_test_images]
    steps:
      - name: Install Docker Compose
        run: |
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
              | sudo gpg --dearmor \
              -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
              | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get remove -y moby-compose || echo "moby-compose not found, proceeding."
            sudo apt-get install -y docker-compose-plugin

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Prepare .env file for Docker Compose
        run: |
          echo "IMAGE_TAG=${{ env.IMAGE_TAG }}" > .env
          echo "SCALE_DAEMON_IMAGE_NAME=ghcr.io/${{ github.repository }}/scale-daemon" >> .env
          echo "PRINTER_DAEMON_IMAGE_NAME=ghcr.io/${{ github.repository }}/printer-daemon" >> .env
          echo "Generated .env file for Docker Compose:"
          cat .env

      - name: Run Integration Tests with Docker Compose
        run: |
          docker compose -f docker-compose.yml up --abort-on-container-exit --exit-code-from scale-daemon --timeout 60

      - name: Docker Compose Down (if tests passed or on failure)
        if: always()
        run: |
          docker compose -f docker-compose.yml down
