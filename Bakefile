#!/usr/bin/env python3

import bakery


# Development Tasks
@bakery.task
def install():
    """Install all dependencies via Poetry"""
    bakery.sh("poetry install --with dev")


@bakery.task
def format():
    """Format code with Black"""
    bakery.sh("poetry run black scale_daemon/ printer_daemon/")


@bakery.task
def lint():
    """Run flake8 linting"""
    bakery.sh("poetry run flake8 scale_daemon/ printer_daemon/")


@bakery.task
def check():
    """Run all quality checks (format, lint)"""
    format()
    lint()


# Testing Tasks
@bakery.task
def test():
    """Run all tests for both daemons"""
    bakery.sh("poetry run pytest scale_daemon/tests/ printer_daemon/tests/")


@bakery.task
def test_scale():
    """Run only scale_daemon tests"""
    bakery.sh("poetry run pytest scale_daemon/tests/")


@bakery.task
def test_printer():
    """Run only printer_daemon tests"""
    bakery.sh("poetry run pytest printer_daemon/tests/")


@bakery.task
def test_cov():
    """Run tests with coverage report"""
    cmd = ("poetry run pytest --cov=scale_daemon --cov=printer_daemon "
           "scale_daemon/tests/ printer_daemon/tests/ "
           "--cov-report=html --cov-report=term")
    bakery.sh(cmd)


@bakery.task
def test_integration():
    """Run integration tests with compose"""
    cmd = ("MOCK_SERIAL_DEVICES=true RUN_INTEGRATION_TEST=true "
           "docker compose up --build --abort-on-container-exit")
    bakery.sh(cmd)


# Docker Tasks
@bakery.task
def build():
    """Build both Docker images"""
    build_scale()
    build_printer()


@bakery.task
def build_scale():
    """Build only scale-daemon image"""
    bakery.sh("docker build -f scale_daemon/Containerfile "
              "-t scale-daemon:ci .")


@bakery.task
def build_printer():
    """Build only printer-daemon image"""
    bakery.sh("docker build -f printer_daemon/Containerfile "
              "-t printer-daemon:ci .")


@bakery.task
def up():
    """Start all services with compose"""
    bakery.sh("docker compose up --build")


@bakery.task
def down():
    """Stop all services"""
    bakery.sh("docker compose down")


@bakery.task
def logs_scale():
    """Show scale daemon logs"""
    bakery.sh("docker compose logs -f scale-daemon")


@bakery.task
def logs_printer():
    """Show printer daemon logs"""
    bakery.sh("docker compose logs -f printer-daemon")


# CI/CD Tasks
@bakery.task
def ci():
    """Run complete CI pipeline locally"""
    install()
    check()
    test()
    build()


@bakery.task
def docker_test():
    """Test Docker builds locally"""
    build()
    scale_cmd = ("docker run --rm scale-daemon:ci python -c "
                 "'import scale_daemon; print(\"Scale daemon imports "
                 "successfully\")'")
    printer_cmd = ("docker run --rm printer-daemon:ci python -c "
                   "'import printer_daemon; print(\"Printer daemon imports "
                   "successfully\")'")
    bakery.sh(scale_cmd)
    bakery.sh(printer_cmd)


@bakery.task
def release():
    """Build and tag release images"""
    bakery.sh("docker build -f scale_daemon/Containerfile "
              "-t scale-daemon:latest .")
    bakery.sh("docker build -f printer_daemon/Containerfile "
              "-t printer-daemon:latest .")


# Utility Tasks
@bakery.task
def clean():
    """Clean Poetry cache, Docker images, etc."""
    bakery.sh("poetry cache clear --all pypi")
    bakery.sh("docker system prune -f")
    bakery.sh("docker volume prune -f")


@bakery.task
def deps_update():
    """Update dependencies"""
    bakery.sh("poetry update")


@bakery.task
def help():
    """Show all available commands"""
    print("\n=== Development Tasks ===")
    print("install      - Install all dependencies via Poetry")
    print("format       - Format code with Black")
    print("lint         - Run flake8 linting")
    print("check        - Run all quality checks")
    print()
    print("=== Testing Tasks ===")
    print("test         - Run all tests for both daemons")
    print("test-scale   - Run only scale_daemon tests")
    print("test-printer - Run only printer_daemon tests")
    print("test-cov     - Run tests with coverage report")
    print("test-integration - Run integration tests with compose")
    print()
    print("=== Docker Tasks ===")
    print("build        - Build both Docker images")
    print("build-scale  - Build only scale-daemon image")
    print("build-printer - Build only printer-daemon image")
    print("up           - Start all services with compose")
    print("down         - Stop all services")
    print("logs-scale   - Show scale daemon logs")
    print("logs-printer - Show printer daemon logs")
    print()
    print("=== CI/CD Tasks ===")
    print("ci           - Run complete CI pipeline locally")
    print("docker-test  - Test Docker builds locally")
    print("release      - Build and tag release images")
    print()
    print("=== Utility Tasks ===")
    print("clean        - Clean Poetry cache, Docker images, etc.")
    print("deps-update  - Update dependencies")
    print("help         - Show this help message")
    print()
    print("Usage: bake <task-name>")
    print("Example: bake install")


if __name__ == "__main__":
    bakery.run()
